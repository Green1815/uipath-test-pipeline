<Activity mc:Ignorable="sap sap2010" x:Class="GetInitiationSource" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Diagnostics;assembly=System.Diagnostics.Process" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="out_strInitiationSource" Type="OutArgument(x:String)" />
    <x:Property Name="out_strStudioVersion" Type="OutArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>774,3900</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GetInitiationSource_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="66">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>System.Security.Principal</x:String>
      <x:String>System.Security.Claims</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="112">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Diagnostics.FileVersionInfo</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>Microsoft.PowerShell.Commands.Diagnostics</AssemblyReference>
      <AssemblyReference>System.Diagnostics.DiagnosticSource</AssemblyReference>
      <AssemblyReference>System.Diagnostics.EventLog</AssemblyReference>
      <AssemblyReference>System.Diagnostics.PerformanceCounter</AssemblyReference>
      <AssemblyReference>System.Diagnostics.Process</AssemblyReference>
      <AssemblyReference>System.Diagnostics.TextWriterTraceListener</AssemblyReference>
      <AssemblyReference>System.Diagnostics.TraceSource</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Security.Claims</AssemblyReference>
      <AssemblyReference>System.Security.Principal.Windows</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="This workflow retrieves the initiation source of the process by checking the local logs that are created at the time of running. The log line that defines the execution start is read and the initiation party is extracted. This can be either Robot or Studio. " DisplayName="GetInitiationSource" sap:VirtualizedContainerService.HintSize="784,3835" sap2010:WorkflowViewState.IdRef="Sequence_19">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Retrieve UiPath Executor Version (new approach)" sap:VirtualizedContainerService.HintSize="722,81" sap2010:WorkflowViewState.IdRef="Sequence_33">
      <Sequence.Variables>
        <Variable x:TypeArguments="sd:Process[]" Name="lstProcessesUiPathExecutor" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign DisplayName="Assign - lstProcessesUiPathExecutor" sap:VirtualizedContainerService.HintSize="570,82" sap2010:WorkflowViewState.IdRef="Assign_42">
        <Assign.To>
          <OutArgument x:TypeArguments="sd:Process[]">[lstProcessesUiPathExecutor]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sd:Process[]">[System.Diagnostics.Process.GetProcessesByName("UiPath.Executor")]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="570,92" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Info" Message="[lstProcessesUiPathExecutor.Count.ToString+&quot; instances found of UiPath.Executor&quot;]" />
      <ui:ForEach x:TypeArguments="sd:Process" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="570,744" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[lstProcessesUiPathExecutor]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="sd:Process">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sd:Process" Name="p" />
            </ActivityAction.Argument>
            <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="534,618" sap2010:WorkflowViewState.IdRef="TryCatch_5">
              <TryCatch.Try>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="496,390" sap2010:WorkflowViewState.IdRef="Sequence_35">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="Assign - Version UiPath Studio" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_45">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[out_strStudioVersion]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[p.MainModule.FileVersionInfo.FileVersion.ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_20" Level="Info" Message="[p.ProcessName+&quot; &quot;+p.MainModule.FileVersionInfo.FileVersion.ToString]" />
                  <ui:Break sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="Break_2" />
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="500,21" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="LogMessage_21" Level="Warn" Message="[exception.Message]" />
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
          </ActivityAction>
        </ui:ForEach.Body>
      </ui:ForEach>
    </Sequence>
    <TryCatch DisplayName="Try Catch - GetInitiationSource - Assign to Robot if exception occurs" sap:VirtualizedContainerService.HintSize="722,3561" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <TryCatch.Try>
        <If Condition="[CInt(out_strStudioVersion.Split(&quot;.&quot;c)(0)) &gt;= 20]" DisplayName="If - StudioVersion is 20 or newer? Retrieve InitiationSource : Do not retrieve" sap:VirtualizedContainerService.HintSize="684,3333" sap2010:WorkflowViewState.IdRef="If_7">
          <If.Then>
            <Sequence DisplayName="Get Actual Source" sap:VirtualizedContainerService.HintSize="650,2849" sap2010:WorkflowViewState.IdRef="Sequence_17">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="strCleanedTodaysLogs" />
                <Variable x:TypeArguments="x:String" Name="strTodaysLog" />
                <Variable x:TypeArguments="x:Boolean" Name="isContinue" />
                <Variable x:TypeArguments="scg:List(x:String)" Name="listLogs" />
                <Variable x:TypeArguments="x:String" Name="strLogFilePath" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign - Create Log FilePath" sap:VirtualizedContainerService.HintSize="608,82" sap2010:WorkflowViewState.IdRef="Assign_17">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[strLogFilePath]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[Path.Combine(Environment.CurrentDirectory,"Log.txt")]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:CopyFile ContinueOnError="{x:Null}" Destination="[strLogFilePath]" DisplayName="Copy File - Log file of today to strLogFilePath" sap:VirtualizedContainerService.HintSize="608,154" sap2010:WorkflowViewState.IdRef="CopyFile_2" Overwrite="True" Path="[String.Format(&quot;{0}\UiPath\Logs\{1}_Execution.log&quot;, Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), datetime.now.ToString(&quot;yyyy-MM-dd&quot;))]" />
              <ui:RetryScope DisplayName="Retry Scope - Read Logs File" sap:VirtualizedContainerService.HintSize="608,328" sap2010:WorkflowViewState.IdRef="RetryScope_2" NumberOfRetries="100" RetryInterval="[Timespan.FromMilliseconds(500)]">
                <ui:RetryScope.ActivityBody>
                  <ActivityAction>
                    <ui:ReadTextFile File="{x:Null}" Content="[strTodaysLog]" DisplayName="Read Text File -  Log File" FileName="[strLogFilePath]" sap:VirtualizedContainerService.HintSize="334,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_2" />
                  </ActivityAction>
                </ui:RetryScope.ActivityBody>
                <ui:RetryScope.Condition>
                  <ActivityFunc x:TypeArguments="x:Boolean">
                    <ui:CheckTrue DisplayName="Check True - Reading successful" ErrorMessage="Log File is not (yet) copied and/or readable." Expression="[Not String.IsNullOrEmpty(strTodaysLog)]" sap:VirtualizedContainerService.HintSize="334,88" sap2010:WorkflowViewState.IdRef="CheckTrue_2" />
                  </ActivityFunc>
                </ui:RetryScope.Condition>
              </ui:RetryScope>
              <ui:Replace DisplayName="Replace - Clean up logs, remove leading log info" sap:VirtualizedContainerService.HintSize="608,60" sap2010:WorkflowViewState.IdRef="Replace_2" Input="[strTodaysLog]" IsBuilderTabModified="False" Pattern="\d{2}:\d{2}:\d{2}.\d{4} \w{4,5} " RegexOption="IgnoreCase, Compiled" Result="[strCleanedTodaysLogs]">
                <ui:Replace.Replacement>
                  <InArgument x:TypeArguments="x:String">
                    <Literal x:TypeArguments="x:String" Value="" />
                  </InArgument>
                </ui:Replace.Replacement>
              </ui:Replace>
              <Assign DisplayName="Assign - Split cleaned logs on newlines" sap:VirtualizedContainerService.HintSize="608,82" sap2010:WorkflowViewState.IdRef="Assign_18">
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">[listLogs]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">[strCleanedTodaysLogs.Trim.Split(Environment.NewLine(0)).ToList]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" DisplayName="Do While - Retrieve type: Take last log, check if message contains &quot;execution started&quot;? Else remove item and start over" sap:VirtualizedContainerService.HintSize="608,1855" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_2">
                <ui:InterruptibleDoWhile.Body>
                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="572,1689" sap2010:WorkflowViewState.IdRef="Sequence_16">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:String" Name="type" />
                      <Variable x:TypeArguments="njl:JObject" Name="json" />
                      <Variable x:TypeArguments="x:String" Name="line" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign - Line as last log" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_19">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[line]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[listLogs.Last]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap2010:Annotation.AnnotationText="Use assign instead of WebAPI Deserialize activity to prevent dependency conflicts" DisplayName="Assign - Deserialize JSON Line" sap:VirtualizedContainerService.HintSize="510,124" sap2010:WorkflowViewState.IdRef="Assign_40">
                      <Assign.To>
                        <OutArgument x:TypeArguments="njl:JObject">[json]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="njl:JObject">[Newtonsoft.Json.JsonConvert.DeserializeObject(Of JObject)(line)]</InArgument>
                      </Assign.Value>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Assign>
                    <If Condition="[json(&quot;message&quot;).ToString.Contains(&quot;execution started&quot;)]" DisplayName="If - Log message contains execution started? Retrieve initiatedBy property ; Else remove item from listLogs " sap:VirtualizedContainerService.HintSize="510,774" sap2010:WorkflowViewState.IdRef="If_5">
                      <If.Then>
                        <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="476,292" sap2010:WorkflowViewState.IdRef="Sequence_14">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign DisplayName="Assign type as initiatedBy property" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_20">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[type]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[json("initiatedBy").ToString]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="isContinue is False" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_21">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">[isContinue]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="476,300" sap2010:WorkflowViewState.IdRef="Sequence_15">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <RemoveFromCollection x:TypeArguments="x:String" Collection="[listLogs]" DisplayName="Remove last item from listLogs" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_4" Item="[listLogs.Last]" />
                          <Assign DisplayName="isContinue is True" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_22">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Boolean">[isContinue]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ui:Continue DisplayName="Next item" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="Continue_2" />
                        </Sequence>
                      </If.Else>
                    </If>
                    <ui:LogMessage DisplayName="Log Message - Executed" sap:VirtualizedContainerService.HintSize="510,92" sap2010:WorkflowViewState.IdRef="LogMessage_3" Message="[String.Format(&quot;Process is executed from {0}&quot;, type)]" />
                    <If Condition="[type.Contains(&quot;Studio&quot;)]" DisplayName="If InitiatedBy Property of log is equal to studio" sap:VirtualizedContainerService.HintSize="510,346" sap2010:WorkflowViewState.IdRef="If_6">
                      <If.Then>
                        <Assign DisplayName="Assign out_strInitiationSource as Studio" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_23">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[out_strInitiationSource]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">Studio</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Assign DisplayName="Assign out_strInitiationSource as Robot" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_24">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[out_strInitiationSource]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">Robot</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Else>
                    </If>
                  </Sequence>
                </ui:InterruptibleDoWhile.Body>
                <ui:InterruptibleDoWhile.Condition>
                  <VisualBasicValue x:TypeArguments="x:Boolean" ExpressionText="isContinue" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_1" />
                </ui:InterruptibleDoWhile.Condition>
              </ui:InterruptibleDoWhile>
            </Sequence>
          </If.Then>
          <If.Else>
            <Sequence DisplayName="Assign Source to Robot" sap:VirtualizedContainerService.HintSize="476,302" sap2010:WorkflowViewState.IdRef="Sequence_25">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign - Robot" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_34">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_strInitiationSource]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Robot</InArgument>
                </Assign.Value>
              </Assign>
              <ui:LogMessage DisplayName="Log Message - Robot" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Initiation Source is assigned to Robot since the Studio Version is to old to retrieve actual Initiation Source.&quot;]" />
            </Sequence>
          </If.Else>
        </If>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="688,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,325" sap2010:WorkflowViewState.IdRef="Sequence_18">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message - Failed" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Warn" Message="[&quot;GetInitiationSource failed due to exception: &quot;+exception.Message]" />
              <Assign DisplayName="Assign out_strInitiationSource as Robot" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_25">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[out_strInitiationSource]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Robot</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>